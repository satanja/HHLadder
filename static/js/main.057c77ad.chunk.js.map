{"version":3,"sources":["Ladder/index.js","Components/index.js","RegisterForm/index.js","MatchForm/index.js","App.js","serviceWorker.js","index.js"],"names":["TableWindow","styled","div","_templateObject","Caption","caption","_templateObject2","Ladder","props","_props$data","data","name","fencers","isHiddenMMR","react_default","a","createElement","Table","striped","bordered","condensed","hover","map","fencer","index","position","concat","MMR","key","p","Components_templateObject","Window","Components_templateObject2","RegisterForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","ladders","ladder","isSelected","nameValidation","idValidation","ladderValidation","event","newName","target","value","setState","newId","_event$target","checked","prevState","objectSpread","assign","selectedLadders","nameLength","length","idLength","preventDefault","validateNameLength","validateId","validateSelectedLadders","filter","message","command","canSubmit","onSubmit","_this2","Components_Caption","FormGroup","controlId","validationState","ControlLabel","FormControl","type","autoComplete","placeholder","onChange","updateName","Feedback","HelpBlock","updateId","Checkbox","updateCheckbox","Button","onClick","Component","MatchForm","selectedLadder","winner","loser","eventKey","DropdownButton","bsStyle","title","MatchForm_CustomMenuItem","onSelect","setLadder","selected","setWinner","setLoser","CustomMenuItem","MenuItem","active","children","App","connection","connect","l","window","location","WebSocket","protocol","hostname","onclose","onConnectionClose","onerror","onConnectionError","onmessage","onConnectionMessage","onopen","onConnectionOpen","console","log","json","JSON","parse","undefined","getLadders","submit","send","stringify","_this3","src_RegisterForm","src_MatchForm","src_Ladder","Boolean","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.057c77ad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * Simple table with all the fencers of a specific ladder\r\n * Author: S.A. Tanja\r\n * Props:\r\n *  - data All the data of the ladder\r\n *    - fencers: array of fencer objects\r\n *    - isHiddenMMR: whether to draw the MMR in the table\r\n *  - name The name of the ladder\r\n */\r\nconst Ladder = props => {\r\n  const { name, fencers, isHiddenMMR } = props.data;\r\n  return (\r\n    <TableWindow>\r\n      <Table striped bordered condensed hover>\r\n        <Caption>{name}</Caption>\r\n        <thead>\r\n          <tr>\r\n            <th>Position</th>\r\n            <th>Name</th>\r\n            {isHiddenMMR ? null : <th>MMR</th>}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {fencers.map((fencer, index) => {\r\n            const position = `${index + 1}.`;\r\n            const { name, MMR } = fencer;\r\n            return (\r\n              <tr key={position}>\r\n                <td>{position}</td>\r\n                <td>{name}</td>\r\n                {isHiddenMMR ? null : <td>{MMR}</td>}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </TableWindow>\r\n  );\r\n};\r\n\r\nconst TableWindow = styled.div`\r\n  width: 90%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Caption = styled.caption`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  color: #000000;\r\n`;\r\n\r\nexport default Ladder;\r\n","import styled from \"styled-components\";\r\n\r\nconst Caption = styled.p`\r\n  text-align: center;\r\n`;\r\n\r\nconst Window = styled.div`\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #ddd;\r\n  padding: 2rem;\r\n  margin-top: 2rem;\r\n`;\r\n\r\nexport { Caption, Window };\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  FormGroup,\r\n  ControlLabel,\r\n  FormControl,\r\n  Checkbox,\r\n  Button,\r\n  HelpBlock\r\n} from \"react-bootstrap\";\r\nimport { Window, Caption } from \"../Components\";\r\n\r\nclass RegisterForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      id: \"\",\r\n      ladders: props.ladders.map(ladder => {\r\n        const obj = {\r\n          name: ladder.name,\r\n          isSelected: false\r\n        };\r\n        return obj;\r\n      }),\r\n      nameValidation: null,\r\n      idValidation: null,\r\n      ladderValidation: null\r\n    };\r\n  }\r\n\r\n  updateName(event) {\r\n    const newName = event.target.value;\r\n    this.setState({ name: newName });\r\n  }\r\n\r\n  updateId(event) {\r\n    const newId = event.target.value;\r\n    this.setState({ id: newId });\r\n  }\r\n\r\n  updateCheckbox(event) {\r\n    const { checked, name } = event.target;\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      ladders: prevState.ladders.map(ladder => {\r\n        if (ladder.name === name) {\r\n          return Object.assign(ladder, { isSelected: checked });\r\n        } else {\r\n          return ladder;\r\n        }\r\n      })\r\n    }));\r\n  }\r\n\r\n  canSubmit(event, selectedLadders) {\r\n    const nameLength = this.state.name.length;\r\n    const idLength = this.state.id.length;\r\n    if (nameLength > 0 && selectedLadders.length > 0 && idLength > 0) {\r\n      return true;\r\n    } else {\r\n      event.preventDefault();\r\n      this.validateNameLength();\r\n      this.validateId();\r\n      this.validateSelectedLadders(selectedLadders);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  validateNameLength() {\r\n    const length = this.state.name.length;\r\n    this.setState({ nameValidation: length === 0 ? \"error\" : null });\r\n  }\r\n\r\n  validateId() {\r\n    const length = this.state.id.length;\r\n    this.setState({ idValidation: length === 0 ? \"error\" : null });\r\n  }\r\n\r\n  validateSelectedLadders(selectedLadders) {\r\n    const length = selectedLadders.length;\r\n    this.setState({ ladderValidation: length === 0 ? \"error\" : null });\r\n  }\r\n\r\n  onSubmit(event) {\r\n    const ladders = this.state.ladders;\r\n    const selectedLadders = ladders\r\n      .filter(ladder => {\r\n        return ladder.isSelected;\r\n      })\r\n      .map(ladder => {\r\n        return { name: ladder.name };\r\n      });\r\n\r\n    const message = {\r\n      command: \"add\",\r\n      name: this.state.name,\r\n      ladders: selectedLadders\r\n    };\r\n    if (this.canSubmit(event, selectedLadders)) {\r\n      this.props.onSubmit(message);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Window>\r\n        <Caption>Register</Caption>\r\n        <form>\r\n          <FormGroup\r\n            controlId=\"formName\"\r\n            validationState={this.state.nameValidation}\r\n          >\r\n            <ControlLabel>Name</ControlLabel>\r\n            <FormControl\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              value={this.state.name}\r\n              placeholder=\"Enter your name\"\r\n              onChange={event => this.updateName(event)}\r\n            />\r\n            <FormControl.Feedback />\r\n            {this.state.nameValidation === \"error\" ? (\r\n              <HelpBlock>Enter a name of at least one character</HelpBlock>\r\n            ) : null}\r\n          </FormGroup>\r\n          <FormGroup\r\n            controlId=\"formId\"\r\n            validationState={this.state.idValidation}\r\n          >\r\n            <ControlLabel>Membership ID</ControlLabel>\r\n            <FormControl\r\n              type=\"number\"\r\n              autoComplete=\"off\"\r\n              value={this.state.id}\r\n              placeholder=\"Enter your membership ID\"\r\n              onChange={event => this.updateId(event)}\r\n            />\r\n            <FormControl.Feedback />\r\n            {this.state.idValidation === \"error\" ? (\r\n              <HelpBlock>Enter an id of length at least one</HelpBlock>\r\n            ) : null}\r\n          </FormGroup>\r\n          <FormGroup\r\n            controlId=\"formLadder\"\r\n            validationState={this.state.ladderValidation}\r\n          >\r\n            <ControlLabel>Select the ladders you want to join</ControlLabel>\r\n            {this.state.ladders.map((ladder, index) => {\r\n              return (\r\n                <Checkbox\r\n                  onChange={event => this.updateCheckbox(event)}\r\n                  name={ladder.name}\r\n                  key={index}\r\n                >\r\n                  {ladder.name}\r\n                </Checkbox>\r\n              );\r\n            })}\r\n            <FormControl.Feedback />\r\n            {this.state.ladderValidation === \"error\" ? (\r\n              <HelpBlock>Select at least one ladder</HelpBlock>\r\n            ) : null}\r\n          </FormGroup>\r\n          <Button type=\"submit\" onClick={event => this.onSubmit(event)}>\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      </Window>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterForm;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  FormGroup,\r\n  ControlLabel,\r\n  DropdownButton,\r\n  MenuItem,\r\n  Button\r\n} from \"react-bootstrap\";\r\nimport { Window, Caption } from \"../Components\";\r\n\r\nclass MatchForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedLadder: \"Select a ladder\",\r\n      winner: \"Select the winner\",\r\n      loser: \"Select the loser\"\r\n    };\r\n  }\r\n\r\n  setLadder(eventKey) {\r\n    this.setState({\r\n      selectedLadder: eventKey,\r\n      winner: \"Select the winner\",\r\n      loser: \"Select the loser\"\r\n    });\r\n  }\r\n\r\n  setWinner(eventKey) {\r\n    this.setState({ winner: eventKey });\r\n  }\r\n\r\n  setLoser(eventKey) {\r\n    this.setState({ loser: eventKey });\r\n  }\r\n\r\n  onSubmit(event) {\r\n    if (\r\n      this.state.winner !== \"Select the winner\" &&\r\n      this.state.loser !== \"Select the loser\"\r\n    ) {\r\n      const message = {\r\n        command: \"match\",\r\n        ladder: this.state.selectedLadder,\r\n        fencers: {\r\n          winner: this.state.winner,\r\n          loser: this.state.loser\r\n        }\r\n      };\r\n      this.props.onSubmit(message);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const ladders = this.props.ladders;\r\n    return (\r\n      <Window>\r\n        <form>\r\n          <Caption>Bout</Caption>\r\n          <FormGroup controlId=\"formLadder\">\r\n            <ControlLabel>Ladder</ControlLabel>\r\n            <br />\r\n            <DropdownButton\r\n              bsStyle=\"default\"\r\n              title={this.state.selectedLadder}\r\n              id={1}\r\n            >\r\n              {ladders.map((ladder, index) => {\r\n                return (\r\n                  <CustomMenuItem\r\n                    eventKey={ladder.name}\r\n                    key={index}\r\n                    onSelect={eventKey => this.setLadder(eventKey)}\r\n                    selected={this.state.selectedLadder}\r\n                  >\r\n                    {ladder.name}\r\n                  </CustomMenuItem>\r\n                );\r\n              })}\r\n            </DropdownButton>\r\n          </FormGroup>\r\n          <FormGroup controlId=\"formWinner\">\r\n            <ControlLabel>Winner</ControlLabel>\r\n            <br />\r\n            <DropdownButton bsStyle=\"success\" title={this.state.winner} id={2}>\r\n              {ladders\r\n                .filter(ladder => {\r\n                  return ladder.name === this.state.selectedLadder;\r\n                })\r\n                .map(ladder => {\r\n                  return ladder.fencers.map((fencer, index) => {\r\n                    return (\r\n                      <CustomMenuItem\r\n                        eventKey={fencer.name}\r\n                        key={index}\r\n                        onSelect={eventKey => this.setWinner(eventKey)}\r\n                        selected={this.state.winner}\r\n                      >\r\n                        {fencer.name}\r\n                      </CustomMenuItem>\r\n                    );\r\n                  });\r\n                })}\r\n            </DropdownButton>\r\n          </FormGroup>\r\n          <FormGroup controlId=\"formLoser\">\r\n            <ControlLabel>Loser</ControlLabel>\r\n            <br />\r\n            <DropdownButton bsStyle=\"danger\" title={this.state.loser} id={3}>\r\n              {ladders\r\n                .filter(ladder => {\r\n                  return ladder.name === this.state.selectedLadder;\r\n                })\r\n                .map(ladder => {\r\n                  return ladder.fencers.map((fencer, index) => {\r\n                    return (\r\n                      <CustomMenuItem\r\n                        eventKey={fencer.name}\r\n                        key={index}\r\n                        onSelect={eventKey => this.setLoser(eventKey)}\r\n                        selected={this.state.loser}\r\n                      >\r\n                        {fencer.name}\r\n                      </CustomMenuItem>\r\n                    );\r\n                  });\r\n                })}\r\n            </DropdownButton>\r\n          </FormGroup>\r\n          <Button type=\"submit\" onClick={() => this.onSubmit()}>\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      </Window>\r\n    );\r\n  }\r\n}\r\n\r\nconst CustomMenuItem = props => {\r\n  const { selected, eventKey, key, onSelect } = props;\r\n  if (eventKey === selected) {\r\n    return (\r\n      <MenuItem\r\n        eventKey={eventKey}\r\n        key={key}\r\n        onSelect={eventKey => onSelect(eventKey)}\r\n        active\r\n      >\r\n        {props.children}\r\n      </MenuItem>\r\n    );\r\n  }\r\n  return (\r\n    <MenuItem\r\n      eventKey={eventKey}\r\n      key={key}\r\n      onSelect={eventKey => onSelect(eventKey)}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n};\r\n\r\nexport default MatchForm;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Ladder from \"./Ladder\";\r\nimport RegisterForm from \"./RegisterForm\";\r\nimport MatchForm from \"./MatchForm\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ladders: []\r\n    };\r\n    this.connection = null;\r\n    this.connect();\r\n  }\r\n\r\n  connect() {\r\n    const l = window.location;\r\n    this.connection = new WebSocket(\r\n      `${l.protocol === \"https:\" ? \"wss\" : \"ws\"}://${l.hostname}:4242`\r\n    );\r\n    this.connection.onclose = event => this.onConnectionClose(event);\r\n    this.connection.onerror = event => this.onConnectionError(event);\r\n    this.connection.onmessage = event => this.onConnectionMessage(event);\r\n    this.connection.onopen = event => this.onConnectionOpen(event);\r\n  }\r\n\r\n  onConnectionClose(event) {\r\n    console.log(\"Closed\");\r\n  }\r\n\r\n  onConnectionError(event) {\r\n    console.log(\"Error\");\r\n  }\r\n\r\n  onConnectionMessage(event) {\r\n    console.log(\"message received\");\r\n    const json = JSON.parse(event.data);\r\n    if (json.ladders !== undefined) {\r\n      this.setState({ ladders: json.ladders });\r\n    }\r\n  }\r\n\r\n  onConnectionOpen(event) {\r\n    console.log(\"Connected\");\r\n    this.getLadders();\r\n  }\r\n\r\n  getLadders() {\r\n    const message = {\r\n      command: \"ladders\"\r\n    };\r\n    this.submit(message);\r\n  }\r\n\r\n  submit(message) {\r\n    this.connection.send(JSON.stringify(message));\r\n  }\r\n\r\n  render() {\r\n    const ladders = this.state.ladders;\r\n    return (\r\n      <div>\r\n        {ladders.length === 0 ? null : (\r\n          <div>\r\n            <RegisterForm\r\n              onSubmit={message => this.submit(message)}\r\n              ladders={ladders}\r\n            />\r\n            <MatchForm\r\n              ladders={ladders}\r\n              onSubmit={message => this.submit(message)}\r\n            />\r\n          </div>\r\n        )}\r\n        {ladders.map((ladder, index) => (\r\n          <Ladder data={ladder} key={index} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}